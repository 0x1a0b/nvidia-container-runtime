variables:
  LICENSE_TAG: $CI_REGISTRY_IMAGE:license
  PACKAGE_PATH: /go/src/gitlab.com/nvidia/container-toolkit/nvidia-container-runtime
  BUILDER: ${CI_REGISTRY_IMAGE}/builder:${CI_COMMIT_REF_NAME}
  DOCKER_HOST: tcp://docker:2375

stages:
  - builder
  - unit
  - integration
  - build

# A hack to make Go in Gitlab work
.anchors:
  - &inject-gopath
      mkdir -p $(dirname ${PACKAGE_PATH})
      && ln -s ${CI_PROJECT_DIR} ${PACKAGE_PATH}
      && cd ${PACKAGE_PATH}

license-builder:
  image: docker:stable
  stage: builder
  services:
  - docker:stable-dind
  only:
    changes:
      - license/Dockerfile
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $LICENSE_TAG ./license
    - docker push $LICENSE_TAG

license:
  stage: unit
  image:
    name: $LICENSE_TAG
  script:
    - ./license/check.sh

vet:
  stage: unit
  image: golang:latest
  before_script:
    - *inject-gopath
  script:
    - go vet $(go list ./... | grep -v "vendor")

lint:
  stage: unit
  image: golang:latest
  allow_failure: true
  before_script:
    - *inject-gopath
    - mkdir /go/bin && export PATH=$PATH:/go/bin
    - go get -u golang.org/x/lint/golint
  script:
    - golint -set_exit_status $(go list ./... | grep -v "vendor")

shim-test:
  stage: integration
  image: golang:latest
  before_script:
    - *inject-gopath
    - mkdir /etc/nvidia-container-runtime && echo "" > /etc/nvidia-container-runtime/config.toml # config for test
    - echo "" > /usr/bin/nvidia-container-runtime-hook # hook for test
    - chmod +x /usr/bin/nvidia-container-runtime-hook
    - cd runtime/src
  script:
    - make test

builder:
  stage: builder
  image: docker:stable
  services:
    - docker:stable-dind
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  
  script:
  - |-
    cat <<EOF > ./builder.Dockerfile
    FROM ubuntu:18.04

    RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        apt-transport-https \
        ca-certificates \
        curl \
        git \
        jq

    RUN curl -fsSL https://get.docker.com -o get-docker.sh && sh ./get-docker.sh

    CMD bash
    EOF

  - docker build -t ${BUILDER} -f ./builder.Dockerfile .
  - docker push ${BUILDER}

build:
  stage: build
  image: ${BUILDER}
  services:
    - docker:stable-dind
  before_script:
    - *inject-gopath
  script:
  - make runtime # this will build all platforms listed in the makefile

  artifacts:
    expire_in: 1 week
    paths:
      - dist/
