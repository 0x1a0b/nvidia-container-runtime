variables:
  LICENSE_TAG: $CI_REGISTRY_IMAGE:license
  PACKAGE_PATH: /go/src/gitlab.com/${CI_PROJECT_PATH}
  BUILDER: ${CI_REGISTRY_IMAGE}/builder:${CI_COMMIT_REF_NAME}
  BASE: ${CI_REGISTRY_IMAGE}/base
  DOCKER_HOST: tcp://docker:2375

stages:
  - build_ami
  - docker_images
  - unit
  - integration
  - build
  - e2e_tests

.build_ami: &build_ami
  stage: build_ami
  image:
    name: hashicorp/packer:1.4.2
    entrypoint: ["usr/bin/env"]
  script:
    - cd testing/${CI_JOB_NAME%-ami} && packer build packer.json
  only:
    changes:
      - testing/${CI_JOB_NAME%-ami}/packer.json
      - testing/${CI_JOB_NAME%-ami}/driver_install.sh

ubuntu16.04-ami:
  <<: *build_ami

centos7-ami:
  <<: *build_ami

license-builder:
  image: docker:stable
  stage: docker_images
  services:
  - docker:stable-dind
  only:
    changes:
      - license/Dockerfile
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $LICENSE_TAG ./license
    - docker push $LICENSE_TAG

# Build the base images and store in gitlab registry
base-builder:
  stage: docker_images
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    changes:
      - base/* 
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - apk add --update make
  script:
    - make -C base base-push BASE=${BASE}

gitlab-builder:
  stage: docker_images
  image: docker:stable
  services:
    - docker:stable-dind
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - docker build --build-arg PKG_PATH="${PACKAGE_PATH}" -t ${BUILDER} -f ./builder.Dockerfile .
    - docker push ${BUILDER}

license:
  stage: unit
  image:
    name: $LICENSE_TAG
  script:
    - ./license/check.sh

code-check:
  stage: unit
  image: ${BUILDER}
  script:
    - cd ${PACKAGE_PATH}
    - make verify

shim-test:
  stage: integration
  image: ${BUILDER}
  before_script:
    - mkdir /etc/nvidia-container-runtime && echo "" > /etc/nvidia-container-runtime/config.toml # config for test
    - echo "" > /usr/bin/nvidia-container-runtime-hook # hook for test
    - chmod +x /usr/bin/nvidia-container-runtime-hook
    - cd ${PACKAGE_PATH}/runtime/src
  script:
    - make test

build:
  stage: build
  image: docker:stable
  services:
    - docker:stable-dind
  before_script:
   - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
   - apk add --update make
  script:
   - make runtime BASE=${BASE} # build all runtime packages
   - make toolkit BASE=${BASE} # build all toolkit packages
  artifacts:
   expire_in: 1 week
   paths:
     - dist/

.e2e_tests: &e2e_tests
  stage: e2e_tests
  allow_failure: false
  image:
    name: hashicorp/terraform:0.12.6
    entrypoint: ["usr/bin/env"]
  before_script:
    - cd testing && mkdir keys
    - ssh-keygen -t rsa -f keys/aws_terraform
  script:
    - cd ${CI_JOB_NAME%-e2e}
    - terraform init
    - terraform apply -auto-approve -var 'artifacts=true' || (terraform destroy -auto-approve && exit 1) # spawn infra
    - (ssh -i ../keys/aws_terraform -o StrictHostKeyChecking=no "$(terraform output instance_login)" "sudo ~/run_tests.sh") || rc=$? # run tests
    - terraform destroy -auto-approve
    - if [ "$rc" ]; then exit $rc; else exit 0; fi # fail job if not all tests pass

ubuntu16.04-e2e:
  <<: *e2e_tests

centos7-e2e:
  <<: *e2e_tests